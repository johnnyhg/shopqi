%h3 添加商品
-#左右分栏需要form class(web-app-theme.css)
= semantic_form_remote_for(resource, :html => { :class => 'form' }) do |f|
  =f.semantic_errors :name, :price
  .columns.wat-cf
    .column.left
      =f.inputs :name, :price
      =f.buttons do
        =f.commit_button '保存'
    .column.right
      所属分类
      .tree

:javascript
  $('.tree').jstree({
    plugins : [ "themes", "json_data", "ui", "dnd", "cookies", "contextmenu", "crrm" ],
    themes: {
      icons: false
    },
    contextmenu: {
      items: {
        create: {
          label: '新增子分类',
          action: function(obj){ this.create(obj); }
        },
        rename: {
          label: '修改名称',
          action: function(obj){ this.rename(obj); }
        },
        remove: {
          label: '删除分类',
          action: function(obj){ this.remove(obj); }
        },
        ccp: false
      }
    },
    json_data:{
      ajax: {
        url: '/categories.json',
        data: function (n) { 
          return { id : n.attr ? n.attr("id") : '' }; 
        }
      }
    }
  //crrm callback
  }).bind("create.jstree", function (e, data) {
    $.post('/categories.js', { 
      'category[parent_id]': data.rslt.parent.attr("id").replace("node_",""), 
      'category[name]': data.rslt.name
    });
  }).bind("rename.jstree", function (e, data) {
    $.ajax({
      type: 'post',
      url: '/categories/' + data.rslt.obj.attr('id').replace("node_","") + '.js', 
      data: { category: {name: data.rslt.new_name}, _method: 'put' },
      error: function (r) {
        if(!r.status){
          $.jGrowl('操作失败');
          $.jstree.rollback(data.rlbk);
        }
      }
    });
  }).bind("remove.jstree", function (e, data) {
    $.ajax({
      type: 'post',
      url: '/categories/' + data.rslt.obj.attr('id').replace("node_","") + '.js', 
      data: { _method: 'delete' },
      error: function (r) {
        if(!r.status){
          $.jGrowl('操作失败');
          $.jstree.rollback(data.rlbk);
        }
      }
    });
  //drag and drop callback
  }).bind("move_node.jstree", function (e, data) {
    //data.rslt contains: 
    //.o - the node being moved 
    //.r - the reference node in the move 
    //.ot - the origin tree instance 
    //.rt - the reference tree instance 
    //.p - the position to move to (may be a string - "last", "first", etc) 
    //.cp - the calculated position to move to (always a number) 
    //.np - the new parent 
    //.oc - the original node (if there was a copy) 
    //.cy - boolen indicating if the move was a copy 
    //.cr - same as np, but if a root node is created this is -1 
    //.op - the former parent 
    //.or - the node that was previously in the position of the moved node 
    $.ajax({
      type: 'post',
      url: '/categories/' + data.rslt.o.attr('id').replace("node_","") + '.js', 
      data: { 
        category: { 
          parent_id: data.rslt.np.attr('id').replace('node_', ''),
          // move to bottom doesn't have neighbor
          neighbor: data.rslt.or.attr('id') ? data.rslt.or.attr('id').replace('node_', '') : '',
        },
        _method: 'put'
      },
      error: function (r) {
        if(!r.status){
          $.jGrowl('操作失败');
          $.jstree.rollback(data.rlbk);
        }
      }
    });
  });
